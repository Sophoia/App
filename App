from flask import Flask, request

# 載入 json 標準函式庫，處理回傳的資料格式
import json
import os
# 載入 LINE Message API 相關函式庫
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from dotenv import load_dotenv


app = Flask(__name__)

load_dotenv()

@app.route("/", methods=['POST'])
def linebot():
    body = request.get_data(as_text=True)                    # 取得收到的訊息內容
    try:
        json_data = json.loads(body)                         # json 格式化訊息內容
        access_token = os.getenv('CHANNEL_ACCESS_TOKEN')
        secret = os.getenv('CHANNEL_SECRET')
        line_bot_api = LineBotApi(access_token)              # 確認 token 是否正確
        handler = WebhookHandler(secret)                     # 確認 secret 是否正確
        signature = request.headers['X-Line-Signature']      # 加入回傳的 headers
        handler.handle(body, signature)                      # 綁定訊息回傳的相關資訊
        tk = json_data['events'][0]['replyToken']            # 取得回傳訊息的 Token
        type = json_data['events'][0]['message']['type']     # 取得 LINe 收到的訊息類型
        if type=='text':
            msg = json_data['events'][0]['message']['text']  # 取得 LINE 收到的文字訊息
            #print(msg)                                       # 印出內容
            #reply = msg
        #else:
            #reply = '你傳的不是文字呦～'
        #print(reply)
        response = get_gpt_response("")
        line_bot_api.reply_message(tk,messages=TextMessage(text=response))# 回傳訊息
    except:
        print(body)                                          # 如果發生錯誤，印出收到的內容
    return 'OK'                                              # 驗證 Webhook 使用，不能省略

import openai
  
# 將你的 API KEY 放在這裡
openai.api_key = os.getenv("OPENAI_API_KEY")

# 顯示並將新的回應加入到對話歷史
def get_gpt_response(user_input):
    conversation = [
        {
            "role": "system",
            "content": "Your are a good companion for teenagers",
        }
    ]
    
    conversation.append({"role": "user", "content": user_input})
    # 呼叫 OpenAI API 來獲取回應
    response = openai.ChatCompletion.create(
        model="gpt-4",  # 可以選擇不同的模型
        messages=conversation,
        temperature=1,
        max_tokens=5000,
        n=1,
        stop=None,
    )
    return response["choices"][0]["message"]["content"]



if __name__ == "__main__":
    app.run(port=3000)
